//// COMPUTE THE BITWISE EXCLUSIVE OR.
function Sys.xor 0
    push argument 0
    push argument 1
    not
    and       // (x AND (NOT y))

    push argument 0
    not
    push argument 1
    and       // (NOT x) AND y

    or        // Combine both with OR
    return

//// SHIFT A VALUE LEFT BY REPEATED ADDITION.
function Sys.shiftLeft 2
    // Store the value to shift in local 0
    push argument 0
    pop local 0

    // Store the shift count in local 1
    push argument 1
    pop local 1

    // Check if shift count is 0
    push local 1
    push constant 0
    eq
    if-goto RETURN_VALUE

label SHIFT_LOOP
    // Check if shift count is done
    push local 1
    push constant 0
    eq
    if-goto RETURN_VALUE

    // Double the value
    push local 0
    push local 0
    add
    pop local 0

    // Decrement counter
    push local 1
    push constant 1
    sub
    pop local 1

    goto SHIFT_LOOP

label RETURN_VALUE
    push local 0
    return

//// COMPUTE THE PARITY OF THE BOTTOM 15 BITS OF AN INTEGER.
function Sys.computeParity 0
    // Store input in local 0
    push argument 0
    pop local 0

    // Initialize parity to 0
    push constant 0
    pop local 1

    // i = 0
    push constant 0
    pop temp 0

label PARITY_LOOP
    // if i == 15, break
    push temp 0
    push constant 15
    eq
    if-goto RETURN_PARITY

    // bitmask = 1 << i
    push constant 1
    push temp 0
    call Sys.shiftLeft 2

    // input & bitmask
    push local 0
    and

    // if result != 0, toggle parity
    push constant 0
    eq
    not
    if-goto TOGGLE_PARITY

    goto NEXT_BIT

label TOGGLE_PARITY
    push local 1
    push constant 1
    call Sys.xor 2
    pop local 1

label NEXT_BIT
    // i++
    push temp 0
    push constant 1
    add
    pop temp 0

    goto PARITY_LOOP

label RETURN_PARITY
    push local 1
    return

//// SET LEFT-MOST BIT TO PARITY BIT.
function Sys.encode 0
    // Clear MSB of input
    push constant 0
    push constant 15
    call Sys.shiftLeft 2
    not
    push argument 0
    and
    pop local 0       // cleared input

    // Compute parity
    push argument 0
    call Sys.computeParity 1
    pop local 1       // parity bit

    // if parity == 0, return cleared value
    push local 1
    push constant 0
    eq
    if-goto RETURN_RESULT

    // Else set MSB
    push local 0
    push constant 0
    push constant 15
    call Sys.shiftLeft 2
    or
    goto FINAL_RETURN

label RETURN_RESULT
    push local 0

label FINAL_RETURN
    return

//// INITIALISE SYSTEM
function Sys.init 0
    push constant 31
    call Sys.encode 1

label WHILE
    goto WHILE
