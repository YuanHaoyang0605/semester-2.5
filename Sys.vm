//// COMPUTE THE BITWISE EXCLUSIVE OR.
// This function takes two arguments and pushes the exclusive
// OR of its bits onto the stack. This function implements the
// formula:
//    x XOR y = (x AND (NOT y)) OR ((NOT x) and y)
// To call this function, you should:
//   1. push the two arguments onto the stack; and
//   2. call this function with `call Sys.xor 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.xor 0
  // Get the two arguments
  
  // 计算 x & !y
  push argument  0    // x
  push argument  1    // y
  not            // !y
  and            // x & !y
  
  // 计算 !x & y
  push argument  0    // x
  not            // !x
  push argument  1    // y
  and            // !x & y
  
  // 计算最终结果 (x & !y) | (!x & y)
  or             // x ^ y = (!x & y) | (x & !y)
  return



//// SHIFT A VALUE LEFT BY REPEATED ADDITION.
// This function takes two arguments and pushes the first argument
// shifted left by as many position as indicated by the second
// argument. To call this function, you should:
//   1. push the two arguments (number to be shifted and number of
//      shift positions) onto the stack; and
//   2. call this function with `call Sys.shiftLeft 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.shiftLeft 2
  // arg0: x, arg1: shift count
  push constant  1     // y = shift count
  pop local  1     // x = value
  call sys.shiftLeft 2
  
  // 处理位移为0的情况
  push argument  0
  and

label SL_LOOP
  push constant 0
  eq
  if-goto NOT_ONE

  // 通过加倍实现左移 x = x + x
  push Local  0
  push constant  1
  call sys.xor 2
  pop local 0
  label NOT_ONE

  push local 1
  push constant 1
  add
  pop local 1
  goto LOOP

  label LOOP_END
  push local 0
  return



//// COMPUTE THE PARITY OF THE BOTTOM 15 BITS OF AN INTEGER.
// This function takes one arguments and pushes the parity of
// the fifteen right-most bits onto the stack. The possible output
// values are 1, if the number of 1s in the right-most fifteen
// bits is odd, or 0, if the number of 1s in the right-most
// fifteen bits is even. Here is some example output:
//
//     INPUT (binary)  | OUT |         NOTES
//    -----------------+-----+-----------------------
//    1000000000000000 |  0  | Left-most bit ignored.
//    0000000000000001 |  1  |
//    1000000000000001 |  1  | Left-most bit ignored.
//    0111111111011111 |  0  |
//    0111111111111111 |  1  |
//    1111111111111111 |  1  | Left-most bit ignored.
//
// To call this function, you should:
//   1. push the argument onto the stack; and
//   2. call this function with `call Sys.computeParity 1`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.computeParity 2
function Sys.computeParity 2
// 将 local 0 设为 parityBit，初始化值设为 0
push constant 0
pop local 0

// 将 local 1 设为计数器(i)，初始化值设为 0
push constant 0
pop local 1

// 主循环取检测 x 中 1 的数量
label LOOP

// 设置计数器循环 15 次
push local 1
push constant 15
eq
if-goto LOOP_END

// 利用 Sys.shiftLeft 函数去让 1(bitmask) 向右移动 i 位
push constant 1
push local 1
call Sys.shiftLeft 2

// 让 x 和 bitmask 进行 and（位与）运算
push argument 0
and

// 检测当前 i 位是否为 1
push constant 0
eq
if-goto NOT_ONE

// 当前 i 位是 1 的情况，将 parityBit(local 0) 与 1 做位或运算(xor)，并更新 parityBit(local 0) 的值
push local 0
push constant 1
call Sys.xor 2
pop local 0

// 当前 i 位非 1 的情况，跳过 parityBit(local 0) 与 1 的位与运算
label NOT_ONE

// 将计数器加 1 并重新开始循环
push local 1
push constant 1
add
pop local 1
goto LOOP

// 当 loop 结束，输出结果(parityBit)
label LOOP_END
push local 0
return

//// SET LEFT-MOST BIT TO PARITY BIT.
// This function takes one 16-bit string and pushes onto the stack
// the same bit string with the left-most bit set to the parity
// bit of the 15 right-most bits. Here is some example output:
//
//     INPUT (binary)  | OUTPUT (binary)  |         NOTES
//    -----------------+------------------+-----------------------
//    1000000000000000 | 0000000000000000 | Left-most bit ignored.
//    0000000000000001 | 1000000000000001 |
//    1000000000000001 | 1000000000000001 | Left-most bit ignored.
//    0111111111011111 | 0111111111011111 |
//    0111111111111111 | 1111111111111111 |
//    1111111111111111 | 1111111111111111 | Left-most bit ignored.
//
// To call this function, you should:
//   1. push the the argument onto the stack; and
//   2. call this function with `call Sys.encode 1`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.encode 0
// 将 x 输入并进行奇偶校验位设置
push argument 0
call Sys.computeParity 1

// 将奇偶校验位移到第 16 bit 位
push constant 15
call Sys.shiftLeft 2

// 将奇偶校验位输入到 x 中的第 16 bit 位上
push argument 0
or

return



// The emulator will start executing from here. You can modify
// the code below while testing and debugging your code, but
// please revert your changes before submitting to Gradescope;
// otherwise, your submission will most likely fail all tests.
//
// A better way to test your code is to use the supplied file
//   Sys.tst
// with the virtual machine emulator. Please do not submit this
// file to Gradescope, as this will cause your submission to be
// rejected.
//
function Sys.init 0
  
  
  call Sys.encode 1
  
label WHILE
  goto WHILE