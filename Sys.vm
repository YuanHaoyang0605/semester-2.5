//// BITWISE EXCLUSIVE OR
function Sys.xor 0
    pop temp 0     // y
    pop temp 1     // x
    push temp 1
    push temp 0
    not
    and            // x & !y
    push temp 0
    push temp 1
    not
    and            // !x & y
    or             // (x & !y) | (!x & y)
    return

//// SHIFT LEFT BY REPEATED ADDITION
function Sys.shiftLeft 2
    pop temp 0     // shift count (y)
    pop temp 1     // value (x)

    push temp 0
    push constant 0
    eq
    if-goto SL_END

label SL_LOOP
    push temp 0
    push constant 0
    eq
    if-goto SL_END

    push temp 1
    push temp 1
    add
    pop temp 1     // x = x + x

    push temp 0
    push constant 1
    sub
    pop temp 0     // y = y - 1

    goto SL_LOOP

label SL_END
    push temp 1
    return

//// COMPUTE PARITY OF 15 RIGHT-MOST BITS
function Sys.computeParity 2
    pop temp 0     // input
    push constant 0
    pop temp 1     // parityBit = 0
    push constant 0
    pop temp 2     // i = 0

label CP_LOOP
    push temp 2
    push constant 15
    eq
    if-goto CP_DONE

    push constant 1
    push temp 2
    call Sys.shiftLeft 2
    pop temp 3     // bitmask = 1 << i

    push temp 0
    push temp 3
    and
    pop temp 4     // result = input & bitmask

    push temp 4
    push constant 0
    eq
    if-goto CP_SKIP

    push temp 1
    push constant 1
    call Sys.xor 2
    pop temp 1     // parityBit ^= 1

label CP_SKIP
    push temp 2
    push constant 1
    add
    pop temp 2     // i++
    goto CP_LOOP

label CP_DONE
    push temp 1
    return

//// SET PARITY BIT TO 16th BIT
function Sys.encode 0
    pop temp 0         // input
    push temp 0
    call Sys.computeParity 1
    pop temp 1         // parity

    push temp 1
    push constant 1
    eq
    if-goto SET_TOP

    // parity == 0, clear top bit
    push constant 1
    push constant 15
    call Sys.shiftLeft 2
    pop temp 2         // bitmask = 1 << 15

    push temp 2
    not
    push temp 0
    and
    pop temp 4
    push temp 4
    return

label SET_TOP
    // parity == 1, set top bit
    push constant 1
    push constant 15
    call Sys.shiftLeft 2
    pop temp 3         // bitmask = 1 << 15

    push temp 0
    push temp 3
    or
    pop temp 4
    push temp 4
    return

//// PROGRAM ENTRY POINT
function Sys.init 0
    call Sys.encode 1

label WHILE
    goto WHILE
