//// COMPUTE THE BITWISE EXCLUSIVE OR.
function Sys.xor 0
    // x = argument 0, y = argument 1
    push argument 0
    push argument 1
    not
    and            // x & ~y

    push argument 0
    not
    push argument 1
    and            // ~x & y

    or             // (x & ~y) | (~x & y)
    return



//// SHIFT A VALUE LEFT BY REPEATED ADDITION.
function Sys.shiftLeft 2
    // local 0: value to shift
    // local 1: shift count

    push argument 0
    pop local 0

    push argument 1
    pop local 1

    push local 1
    push constant 0
    eq
    if-goto RETURN_VALUE

label SHIFT_LOOP
    push local 1
    push constant 0
    eq
    if-goto RETURN_VALUE

    push local 0
    push local 0
    add
    pop local 0

    push local 1
    push constant 1
    sub
    pop local 1

    goto SHIFT_LOOP

label RETURN_VALUE
    push local 0
    return



//// COMPUTE THE PARITY OF THE BOTTOM 15 BITS OF AN INTEGER.
function Sys.computeParity 2
    // local 0: input number
    // local 1: parity bit

    push argument 0
    pop local 0

    push constant 0
    pop local 1

    push constant 0
    pop temp 0  // i = 0

label PARITY_LOOP
    push temp 0
    push constant 15
    eq
    if-goto RETURN_PARITY

    // bitmask = 1 << i
    push constant 1
    push temp 0
    call Sys.shiftLeft 2

    push local 0
    and
    push constant 0
    eq
    not
    if-goto BIT_IS_SET

    goto NEXT_BIT

label BIT_IS_SET
    push local 1
    push constant 1
    call Sys.xor 2
    pop local 1

label NEXT_BIT
    push temp 0
    push constant 1
    add
    pop temp 0
    goto PARITY_LOOP

label RETURN_PARITY
    push local 1
    return



//// SET LEFT-MOST BIT TO PARITY BIT.
function Sys.encode 0
    // Clear MSB
    push constant 1
    push constant 15
    call Sys.shiftLeft 2
    not
    push argument 0
    and
    pop temp 0            // value with MSB cleared

    // Compute parity
    push argument 0
    call Sys.computeParity 1
    pop temp 1            // parity bit

    push temp 1
    push constant 0
    eq
    if-goto RETURN_RESULT

    // Set MSB if parity == 1
    push temp 0
    push constant 1
    push constant 15
    call Sys.shiftLeft 2
    or
    goto END

label RETURN_RESULT
    push temp 0
    goto END

label END
    return



// Emulator entry point
function Sys.init 0
    call Sys.encode 1

label WHILE
    goto WHILE
